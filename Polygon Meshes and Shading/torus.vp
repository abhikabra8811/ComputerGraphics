/*
 * Torus vertex shader
 * Compute vertex and normal using u-v's in gl_Vertex and gl_Normal
 */

// Send to fragment shader: position and normal (in eye coordinates)
varying vec4 pos;
varying vec3 norm;

// Torus parameters
uniform float outRad, inRad;

// Position at (u,v) on a torus
vec4 torusPosition(float u, float v)
{
    // ... (placeholder)
    float a = (outRad - inRad) / 2.0;
    float c = (outRad + inRad) / 2.0;
    float xCoord = (c + a * cos(v)) * cos(u);
    float yCoord = (c + a * cos(v)) * sin(u);
    float zCoord = a * sin(v);
    return vec4(xCoord, yCoord, zCoord, 1);
}

// Normal vector at (u,v) on a torus
vec3 torusNormal(float u, float v)
{
    // ... (placeholder)
    float normX = cos(u) * cos(v);
    float normY = sin(u) * cos(v);
    float normZ = sin(v);
    return vec3(normX, normY, normZ);
}

void main()
{
    // ... (placeholder -- should compute position and normal)
    vec4 my_Vertex = torusPosition(gl_Vertex.x, gl_Vertex.y);
    vec3 my_Normal = torusNormal(gl_Normal.x, gl_Normal.y);
    // ...

	//checks if vertex belongs to normal and changes the vertex
    if(gl_Vertex.z == 100.0)
    {
    	my_Vertex[0] = my_Vertex[0] + 0.15 * my_Normal[0];
    	my_Vertex[1] = my_Vertex[1] + 0.15 * my_Normal[1];
    	my_Vertex[2] = my_Vertex[2] + 0.15 * my_Normal[2];
    }

    // For fragment shader
    pos  = gl_ModelViewMatrix * my_Vertex;
    norm = gl_NormalMatrix    * my_Normal;

    // Use computed vertex position
    gl_Position = gl_ModelViewProjectionMatrix * my_Vertex;
    // Pass color to the fragment shader
    gl_FrontColor = gl_Color;
}
